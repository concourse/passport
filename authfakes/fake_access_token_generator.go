// This file was generated by counterfeiter
package authfakes

import (
	"sync"

	"github.com/concourse/atc/auth"
)

type FakeAccessTokenGenerator struct {
	GenerateTokenStub        func() (auth.TokenType, auth.AccessTokenValue, error)
	generateTokenMutex       sync.RWMutex
	generateTokenArgsForCall []struct{}
	generateTokenReturns     struct {
		result1 auth.TokenType
		result2 auth.AccessTokenValue
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccessTokenGenerator) GenerateToken() (auth.TokenType, auth.AccessTokenValue, error) {
	fake.generateTokenMutex.Lock()
	fake.generateTokenArgsForCall = append(fake.generateTokenArgsForCall, struct{}{})
	fake.recordInvocation("GenerateToken", []interface{}{})
	fake.generateTokenMutex.Unlock()
	if fake.GenerateTokenStub != nil {
		return fake.GenerateTokenStub()
	} else {
		return fake.generateTokenReturns.result1, fake.generateTokenReturns.result2, fake.generateTokenReturns.result3
	}
}

func (fake *FakeAccessTokenGenerator) GenerateTokenCallCount() int {
	fake.generateTokenMutex.RLock()
	defer fake.generateTokenMutex.RUnlock()
	return len(fake.generateTokenArgsForCall)
}

func (fake *FakeAccessTokenGenerator) GenerateTokenReturns(result1 auth.TokenType, result2 auth.AccessTokenValue, result3 error) {
	fake.GenerateTokenStub = nil
	fake.generateTokenReturns = struct {
		result1 auth.TokenType
		result2 auth.AccessTokenValue
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAccessTokenGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateTokenMutex.RLock()
	defer fake.generateTokenMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAccessTokenGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.AccessTokenGenerator = new(FakeAccessTokenGenerator)
